#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";

;; =============== storage =============================

;; storage binary format is defined as TL-B in companion .tlb file

(slice, int, int) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(), ;; owner_address
    ds~load_uint(64), ;; counter1
    ds~load_uint(64) ;; counter2
  );
}

() save_data(slice owner_address, int counter1, int counter2) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(counter1, 64)
    .store_uint(counter2, 64)
    .end_cell());
}

;; =============== messages =============================

;; message binary format is defined as TL-B in companion .tlb file

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
  ;; parse incoming internal message
  slice cs = in_msg.begin_parse();
  int flags = cs~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  slice sender_address = cs~load_msg_addr();

  ;; handle bounced messages
  if (flags & 1) {
    return (); ;; ignore
  }

  ;; load from contract storage
  var (owner_address, counter1, counter2) = load_data();

  ;; handle operations
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  if (op == op::increment) {
    save_data(owner_address, counter1 + 1, counter2 + 1);
    return ();
  }

  throw(error::unknown_op);
}

;; =============== getters =============================

slice owner_address() method_id {
  var (owner_address, _, _) = load_data();
  return owner_address;
}

(int, int) counters() method_id {
  var (_, counter1, counter2) = load_data();
  return (counter1, counter2);
}